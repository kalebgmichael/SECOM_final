# Server Configuration
server.port=8906

# Kafka Producer Properties - Assuming Kafka runs as a Docker service named 'kafka-service'
spring.kafka.producer.bootstrap-servers=broker:9092
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer

# Kafka Consumer Properties - Also using the same Kafka service name
spring.kafka.consumer.bootstrap-servers=broker:9092
spring.kafka.consumer.group-id=my-group
spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer
spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer
spring.kafka.consumer.properties.spring.json.trusted.packages=*
spring.application.name=KEYEX-SERVICE

# Redis Configuration - Assuming Redis runs as a Docker service named 'redis-service'
spring.redis.host=redis-service
spring.redis.port=6379

# Eureka Server Configuration - Assuming Eureka service is named 'eureka-server'
eureka.client.serviceUrl.defaultZone=http://discovery-server:8761/eureka

# Keycloak Configuration for JWT Tokens - Assuming Keycloak service is named 'keycloak-server'
spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://keycloak:8181/realms/SECOM/protocol/openid-connect/certs


# Zipkin Configuration
management.tracing.sampling.probability=1.0


# zipkin configuration for docker
management.zipkin.tracing.endpoint = http://zipkin:9411/api/v2/spans
